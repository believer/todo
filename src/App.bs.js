// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Todo from "./Todo.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./Input.bs.js";
import * as React from "react";
import * as TodoItem from "./TodoItem.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as EmptyState from "./EmptyState.bs.js";
import * as Typography from "./Typography.bs.js";

function fromString(id) {
  return id;
}

function toString(id) {
  return id;
}

var ID = {
  fromString: fromString,
  toString: toString
};

function App(Props) {
  var match = React.useReducer((function (state, action) {
          if (typeof action === "number") {
            if (action === /* AddTodo */0) {
              return {
                      todos: Belt_Array.concat(state.todos, [[
                              String(new Date().getTime()),
                              {
                                TAG: /* Incomplete */1,
                                content: state.input
                              }
                            ]]),
                      input: "",
                      searchQuery: state.searchQuery
                    };
            } else {
              return {
                      todos: Belt_Array.keep(state.todos, (function (param) {
                              return !Todo.isComplete(param[1]);
                            })),
                      input: state.input,
                      searchQuery: state.searchQuery
                    };
            }
          }
          switch (action.TAG | 0) {
            case /* AddTodoChange */0 :
                return {
                        todos: state.todos,
                        input: action._0,
                        searchQuery: state.searchQuery
                      };
            case /* RemoveTodo */1 :
                var id = action._0;
                return {
                        todos: Belt_Array.keep(state.todos, (function (param) {
                                return id !== param[0];
                              })),
                        input: state.input,
                        searchQuery: state.searchQuery
                      };
            case /* ToggleTodo */2 :
                var todoId = action._0;
                return {
                        todos: Belt_Array.map(state.todos, (function (param) {
                                var todo = param[1];
                                var id = param[0];
                                if (id === todoId) {
                                  return [
                                          id,
                                          Todo.toggle(todo)
                                        ];
                                } else {
                                  return [
                                          id,
                                          todo
                                        ];
                                }
                              })),
                        input: state.input,
                        searchQuery: state.searchQuery
                      };
            case /* UpdateTodo */3 :
                var updatedTodo = action._1;
                var todoId$1 = action._0;
                return {
                        todos: Belt_Array.map(state.todos, (function (param) {
                                var todo = param[1];
                                var id = param[0];
                                if (id === todoId$1) {
                                  return [
                                          id,
                                          Todo.updateContent(todo, updatedTodo)
                                        ];
                                } else {
                                  return [
                                          id,
                                          todo
                                        ];
                                }
                              })),
                        input: state.input,
                        searchQuery: state.searchQuery
                      };
            case /* Search */4 :
                return {
                        todos: state.todos,
                        input: state.input,
                        searchQuery: action._0
                      };
            
          }
        }), {
        todos: [],
        input: "",
        searchQuery: ""
      });
  var dispatch = match[1];
  var state = match[0];
  var incompleteTasks = Todo.incomplete(state.todos, state.searchQuery);
  var completedTasks = Todo.completed(state.todos, state.searchQuery);
  var renderTodo = function (param) {
    var id = param[0];
    return React.createElement(TodoItem.make, {
                todo: param[1],
                onToggle: (function (param) {
                    return Curry._1(dispatch, {
                                TAG: /* ToggleTodo */2,
                                _0: id
                              });
                  }),
                onRemove: (function (param) {
                    return Curry._1(dispatch, {
                                TAG: /* RemoveTodo */1,
                                _0: id
                              });
                  }),
                onUpdate: (function (updatedTodo) {
                    return Curry._1(dispatch, {
                                TAG: /* UpdateTodo */3,
                                _0: id,
                                _1: updatedTodo
                              });
                  }),
                key: id
              });
  };
  var match$1 = incompleteTasks.length;
  var match$2 = state.searchQuery;
  var tmp;
  tmp = match$1 !== 0 ? React.createElement("ul", {
          className: "mt-4 space-y-1"
        }, Belt_Array.map(incompleteTasks, renderTodo)) : (
      match$2 === "" ? React.createElement(EmptyState.NoTodos.make, {}) : React.createElement(EmptyState.NoSearchResults.make, {
              query: state.searchQuery
            })
    );
  var match$3 = state.todos.length;
  var match$4 = completedTasks.length;
  var match$5 = state.searchQuery;
  var tmp$1;
  var exit = 0;
  var exit$1 = 0;
  var exit$2 = 0;
  if (match$4 !== 0 || match$5 !== "") {
    exit$2 = 3;
  } else {
    tmp$1 = null;
  }
  if (exit$2 === 3) {
    if (match$3 !== 0 || match$4 !== 0) {
      exit$1 = 2;
    } else {
      tmp$1 = null;
    }
  }
  if (exit$1 === 2) {
    if (match$4 !== 0 || match$3 <= 0) {
      exit = 1;
    } else {
      tmp$1 = React.createElement(React.Fragment, undefined, React.createElement(Typography.H2.make, {
                children: "Done"
              }), React.createElement(EmptyState.NoSearchResults.make, {
                query: state.searchQuery
              }));
    }
  }
  if (exit === 1) {
    tmp$1 = React.createElement(React.Fragment, undefined, React.createElement(Typography.H2.make, {
              children: "Done"
            }), React.createElement("ul", {
              className: "mt-4 space-y-1"
            }, Belt_Array.map(completedTasks, renderTodo)), React.createElement("div", {
              className: "flex justify-end"
            }, React.createElement("button", {
                  className: "mt-4 bg-red-100 text-red-800 rounded px-2 py-1",
                  onClick: (function (param) {
                      return Curry._1(dispatch, /* ArchiveTodos */1);
                    })
                }, "Archive todos")));
  }
  return React.createElement("div", {
              className: "mt-8 max-w-sm mx-5 md:mx-auto"
            }, React.createElement(Typography.H1.make, {
                  children: "Tasks"
                }), React.createElement(Input.make, {
                  label: "Search",
                  id: "search",
                  value: state.searchQuery,
                  onChange: (function (value) {
                      return Curry._1(dispatch, {
                                  TAG: /* Search */4,
                                  _0: value
                                });
                    })
                }), React.createElement("div", {
                  className: "mt-2"
                }, React.createElement(Input.make, {
                      label: "New todo",
                      id: "new-todo",
                      value: state.input,
                      onKeyPress: (function ($$event) {
                          if ($$event.key === "Enter" && state.input !== "") {
                            return Curry._1(dispatch, /* AddTodo */0);
                          }
                          
                        }),
                      onChange: (function (value) {
                          return Curry._1(dispatch, {
                                      TAG: /* AddTodoChange */0,
                                      _0: value
                                    });
                        })
                    })), React.createElement(Typography.H2.make, {
                  children: "TODO"
                }), tmp, tmp$1);
}

var make = App;

export {
  ID ,
  make ,
  
}
/* Input Not a pure module */
